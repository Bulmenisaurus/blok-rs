use blok_rs::board::BoardState;
use blok_rs::board::GameResult;
use blok_rs::board::Score;
use blok_rs::board::StartPosition;
use blok_rs::movegen;
use blok_rs::nn::NNUE;

use serde_json;

#[test]
pub fn root_node_has_all_moves() {
    let mut game = BoardState::new(StartPosition::Corner, NNUE);
    let moves = movegen::generate_moves(&game);

    let expected_moves = vec![
        0, 3, 4, 5, 6, 7, 2049, 2050, 2051, 2052, 4096, 4099, 4100, 4103, 6144, 6145, 6146, 8192,
        8193, 8194, 8195, 10240, 10241, 10242, 12289, 12290, 16386, 16387, 18433, 18434, 20480,
        20483, 20484, 20485, 20486, 20487, 22531, 22532, 24576, 26625, 26626, 26627, 26628, 26629,
        26630, 28674, 28675, 30721, 30722, 32768, 34816, 34817, 36864, 36865, 38912, 38913, 40960,
        40961,
    ];

    let score = game.score();

    assert_eq!(score.player_a, 0);
    assert_eq!(score.player_b, 0);

    assert_eq!(moves, expected_moves);

    game.do_move(0);
    let moves = movegen::generate_moves(&game);
    let expected_moves = vec![
        67152, 67153, 66914, 66915, 67156, 66919, 69200, 69205, 68966, 68967, 71248, 71011, 71252,
        71015, 73313, 73314, 73315, 75352, 75353, 75234, 75235, 77273, 77274, 77275, 79321, 79322,
        83416, 83417, 85465, 85466, 87640, 87641, 87522, 87523, 87644, 87527, 89560, 89567, 91744,
        93664, 93665, 93786, 93669, 93790, 93791, 95712, 95833, 97761, 97882, 100072, 102112,
        101993, 104152, 103913, 106192, 105833, 108232, 107753,
    ];

    let score = game.score();

    assert_eq!(score.player_a, 5);
    assert_eq!(score.player_b, 0);

    assert_eq!(moves, expected_moves);

    game.do_move(67152);
    let mut moves = movegen::generate_moves(&game);
    moves.sort();

    let expected_moves = vec![
        2087, 2208, 2213, 2214, 2304, 2317, 2318, 2319, 2320, 2322, 2323, 2333, 2334, 2335, 2337,
        2338, 2339, 2340, 4134, 4257, 4258, 4261, 4356, 4360, 4362, 4366, 4371, 4373, 4375, 4377,
        4378, 4382, 4384, 4387, 4388, 4391, 6307, 6408, 6410, 6411, 6417, 6427, 6432, 6433, 6434,
        8448, 8449, 8458, 8459, 8465, 8480, 8481, 8482, 8483, 10275, 10496, 10498, 10499, 10513,
        10515, 10528, 10529, 10530, 12323, 12448, 12544, 12547, 12554, 12560, 12561, 12571, 12577,
        12578, 14496, 14600, 14616, 16417, 16544, 16640, 16642, 16649, 16656, 16659, 16665, 16674,
        16675, 18467, 18587, 18592, 18688, 18691, 18698, 18705, 18707, 18712, 18721, 18722, 20641,
        20642, 20736, 20737, 20741, 20746, 20747, 20748, 20750, 20759, 20761, 20762, 20768, 20771,
        20772, 20773, 20774, 20775, 22562, 22688, 22689, 22693, 22694, 22695, 22785, 22790, 22792,
        22794, 22795, 22797, 22799, 22801, 22804, 22808, 22810, 22813, 22814, 22815, 22819, 22820,
        24840, 24864, 26656, 26791, 26883, 26886, 26887, 26888, 26889, 26892, 26898, 26901, 26903,
        26904, 26913, 26914, 26915, 26916, 26917, 26918, 28832, 28833, 28930, 28936, 28937, 28947,
        28952, 28953, 28962, 28963, 30880, 30883, 30979, 30984, 30986, 30993, 31000, 31003, 31009,
        31010, 33040, 33056, 35080, 35089, 35104, 35105, 37120, 37137, 37152, 37153, 39185, 39200,
        39201, 41233, 41248, 41249,
    ];

    let score = game.score();

    assert_eq!(score.player_a, 5);
    assert_eq!(score.player_b, 5);

    assert_eq!(moves, expected_moves);
}

#[test]
pub fn game_length_movegen() {
    let game_data = include_str!("./testdata/game_movedata.json");
    let test_data: Vec<Vec<Vec<u32>>> = serde_json::from_str(game_data).unwrap();

    for single_game_data in test_data {
        let mut game = BoardState::new(StartPosition::Corner, NNUE);

        for move_data in single_game_data {
            game.do_move(move_data[0]);
            let mut moves = movegen::generate_moves(&game);
            moves.sort();

            let mut expected_moves = move_data[1..].to_vec();
            expected_moves.sort();

            assert_eq!(moves, expected_moves);
        }
    }
}

#[test]
pub fn root_node_middle_movegen() {
    let game = BoardState::new(StartPosition::Middle, NNUE);
    let mut moves = movegen::generate_moves(&game);
    moves.sort();

    let expected_moves = vec![
        154, 155, 159, 162, 166, 167, 282, 283, 294, 295, 392, 393, 396, 401, 404, 409, 410, 411,
        412, 417, 420, 421, 422, 423, 520, 521, 525, 528, 533, 536, 538, 539, 541, 542, 544, 547,
        548, 549, 550, 551, 2206, 2207, 2210, 2211, 2330, 2334, 2335, 2338, 2339, 2343, 2440, 2445,
        2448, 2449, 2453, 2456, 2459, 2460, 2461, 2462, 2463, 2464, 2466, 2467, 2469, 2470, 2569,
        2572, 2576, 2577, 2580, 2585, 2588, 2589, 2590, 2591, 2593, 2594, 2595, 2596, 4251, 4255,
        4258, 4262, 4379, 4382, 4383, 4386, 4387, 4390, 4488, 4492, 4496, 4500, 4501, 4504, 4505,
        4506, 4509, 4510, 4511, 4513, 4514, 4515, 4517, 4519, 4617, 4621, 4625, 4628, 4629, 4632,
        4633, 4634, 4636, 4638, 4640, 4643, 4644, 4647, 6553, 6554, 6555, 6560, 6561, 6563, 6680,
        6682, 6683, 6688, 6689, 6690, 8474, 8475, 8482, 8483, 8592, 8593, 8601, 8602, 8608, 8609,
        8611, 8720, 8721, 8728, 8730, 8731, 8736, 8737, 8738, 8739, 10513, 10514, 10515, 10521,
        10523, 10528, 10529, 10531, 10642, 10643, 10656, 10657, 10768, 10770, 10771, 10776, 10778,
        10784, 10785, 10786, 12561, 12562, 12570, 12571, 12576, 12579, 12688, 12689, 12696, 12697,
        12698, 12699, 12704, 12705, 12816, 12819, 12826, 12827, 12833, 12834, 14616, 14736, 14744,
        14752, 14872, 16656, 16657, 16665, 16666, 16673, 16675, 16784, 16787, 16792, 16793, 16794,
        16795, 16800, 16803, 16912, 16914, 16921, 16922, 16930, 16931, 18705, 18706, 18713, 18715,
        18720, 18723, 18834, 18835, 18840, 18841, 18842, 18843, 18848, 18849, 18960, 18963, 18968,
        18970, 18977, 18978, 20762, 20763, 20767, 20770, 20774, 20775, 20880, 20881, 20884, 20888,
        20889, 20890, 20891, 20892, 20893, 20894, 20895, 20897, 20898, 20899, 20900, 20901, 20902,
        20903, 21008, 21009, 21013, 21016, 21017, 21018, 21019, 21020, 21021, 21022, 21024, 21027,
        21028, 21029, 21030, 21031, 22800, 22807, 22809, 22810, 22811, 22812, 22814, 22815, 22818,
        22821, 22928, 22929, 22930, 22931, 22932, 22933, 22936, 22937, 22938, 22939, 22940, 22941,
        22942, 22943, 22944, 22945, 22948, 22949, 22950, 22951, 23057, 23062, 23064, 23066, 23067,
        23069, 23070, 23071, 23075, 23076, 24984, 24992, 25112, 25120, 26904, 26905, 26909, 26912,
        26916, 26917, 27026, 27030, 27031, 27032, 27033, 27034, 27039, 27042, 27043, 27044, 27045,
        27047, 27155, 27158, 27159, 27160, 27161, 27163, 27164, 27166, 27169, 27170, 27171, 27172,
        27173, 27174, 28952, 28963, 29073, 29080, 29081, 29082, 29083, 29088, 29089, 29091, 29202,
        29208, 29209, 29210, 29218, 29219, 31001, 31008, 31122, 31128, 31129, 31130, 31131, 31136,
        31137, 31139, 31251, 31256, 31258, 31259, 31265, 31266, 33312, 35233, 35352, 35360, 35361,
        37153, 37281, 37392, 37400, 37408, 37409, 39073, 39201, 39329, 39432, 39440, 39448, 39456,
        39457, 40993, 41121, 41249, 41377, 41472, 41480, 41488, 41496, 41504, 41505,
    ];

    assert_eq!(moves, expected_moves);
}

#[test]
pub fn root_node_middle_blokee_movegen() {
    let game = BoardState::new(StartPosition::MiddleBlokee, NNUE);
    let mut moves = movegen::generate_moves(&game);
    moves.sort();

    let expected_moves = vec![
        442, 446, 447, 697, 700, 701, 2490, 2491, 2744, 2749, 4538, 4542, 4793, 4797, 6840, 6841,
        6843, 8762, 8763, 8888, 8889, 10808, 10809, 10811, 12856, 12859, 16953, 16955, 19000,
        19003, 21050, 21054, 21055, 21177, 21180, 21181, 23098, 23101, 25272, 27192, 27196, 27197,
        27322, 27323, 27327, 29243, 29369, 31288, 31419, 33592, 35513, 35640, 37433, 37688, 39353,
        39736, 41273, 41784,
    ];

    assert_eq!(moves, expected_moves);
}

#[test]
pub fn test_score() {
    let corner_score = playout_min(StartPosition::Corner);

    assert_eq!(corner_score.player_a, 71);
    assert_eq!(corner_score.player_b, 68);

    let middle_score = playout_min(StartPosition::Middle);

    assert_eq!(middle_score.player_a, 72);
    assert_eq!(middle_score.player_b, 73);

    let middle_blokee = playout_min(StartPosition::MiddleBlokee);

    assert_eq!(middle_blokee.player_a, 51);
    assert_eq!(middle_blokee.player_b, 46);
}

fn playout_min(start_pos: StartPosition) -> Score {
    let mut game = BoardState::new(start_pos, NNUE);
    while game.game_result() == GameResult::InProgress {
        let moves = movegen::generate_moves(&game);
        let min_move = moves.iter().min().unwrap();

        game.do_move(*min_move);
    }

    game.score()
}
